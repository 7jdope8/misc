#/usr/bin/env python
# Author Dario Clavijo 2020
# GPlv3
# bitlocker fvek decryptor
# based on https://pulsesecurity.co.nz/articles/TPM-sniffing

from Cryptodome.Cipher import AES
import binascii

encrypted_fvek= [0xfb, 0xd6, 0x5f, 0x50, 0xe3, 0x82, 0x92, 0x60, 0x71, 0x16, 0x5c, 0x7a,
        0x4b, 0xd3, 0xa9, 0x92, 0xa3, 0x94, 0xff, 0x09, 0xed, 0xbc, 0x6b, 0xfb,
        0x16, 0xcc, 0x2e, 0x08, 0xee, 0x25, 0x57, 0x95, 0xe9, 0x7b, 0x83, 0x8b,
        0x8d, 0x6f, 0xcd, 0x0e, 0x06, 0xe9, 0x5c, 0x54]

mac = [ 0xdc, 0x5f, 0x42, 0x12, 0x9a, 0x4c, 0x5f, 0xd5, 0x12, 0x97, 0xe3, 0x15, 0x9b, 0x83, 0x10, 0x56 ]

nonce = [ 0xb0, 0xb2, 0xfb, 0x7c, 0xb4, 0xc6, 0xd4, 0x01, 0x0f, 0x00, 0x00, 0x00 ]

vmk = [ 0x9a, 0x12, 0x61, 0x46, 0xb5, 0xb2, 0x85, 0xc9, 0x3f, 0x7c, 0x4b, 0xcd,
        0x37, 0x2f, 0x91, 0xd0, 0x18, 0x1f, 0xe7, 0xed, 0xdc, 0x44, 0xe5, 0x88,
        0x45, 0x9e, 0xbd, 0xb2, 0x44, 0xd9, 0x7b, 0xaa]

def arr_to_bin(array_alpha):
  return binascii.unhexlify(''.join('{:02x}'.format(x) for x in array_alpha))

key = arr_to_bin(vmk) 
ciphertext = arr_to_bin(encrypted_fvek)
nonce = arr_to_bin(nonce)
mac = arr_to_bin(mac)

print ("vmk:",binascii.hexlify(key))
print ("encrypted_fvek:",binascii.hexlify(ciphertext))
print ("nonce:",binascii.hexlify(nonce))
print ("mac:",binascii.hexlify(mac))

cipher = AES.new(key, AES.MODE_CCM, nonce)
#cipher.update(hdr)
plaintext = cipher.decrypt(ciphertext)

try:
    cipher.verify(mac)
    #print ("The message is authentic: hdr=%s, pt=%s" % (hdr, plaintext))
    print("Description OK")
    print("plaintext fvek:",binascii.hexlify(plaintext))
except ValueError:
    print ("Key incorrect or message corrupted")
